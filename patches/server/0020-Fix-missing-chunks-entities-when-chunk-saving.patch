From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: David Mayr <davidliebtkekse@gmail.com>
Date: Thu, 5 Dec 2024 01:41:21 +0100
Subject: [PATCH] Fix missing chunks & entities when chunk saving


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
index 62b526f7e147586977615ec8cec191d0aaf0bcdc..ad7c19ceb42da90bd995421be7fb764aa7ee48e0 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
@@ -897,6 +897,13 @@ public final class NewChunkHolder {
 
         final boolean shouldLevelChunkNotSave = PlatformHooks.get().forceNoSave(chunk);
 
+        // ASP start - Chunk unloading
+        if (world instanceof com.infernalsuite.asp.level.SlimeLevelInstance slime && chunk instanceof LevelChunk levelChunk) {
+            //The custom entity slices need to be passed on for entities to be saved
+            slime.onChunkUnloaded(levelChunk, entityChunk);
+        }
+        // ASP end - Chunk unloading
+
         // unload chunk data
         if (chunk != null) {
             if (chunk instanceof LevelChunk levelChunk) {
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
index 43790021bdc50a37d4bda7a89586eb56eb032791..4f99fbafda6cd4500005a793bba73eee5a2061b9 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
@@ -66,12 +66,19 @@ public class NMSSlimeChunk implements SlimeChunk {
     private final CompoundTag extra;
     private final CompoundTag upgradeData;
 
+    private final ChunkEntitySlices entitySlices;
+
     public NMSSlimeChunk(LevelChunk chunk, SlimeChunk reference) {
+        this(chunk, reference, null);
+    }
+
+    public NMSSlimeChunk(LevelChunk chunk, SlimeChunk reference, ChunkEntitySlices slices) {
         this.chunk = chunk;
         this.extra = new CompoundTag("", new CompoundMap());
         extra.getValue().put(Converter.convertTag("ChunkBukkitValues", chunk.persistentDataContainer.toTagCompound()));
 
         this.upgradeData = reference == null ? null : reference.getUpgradeData();
+        this.entitySlices = slices;
     }
 
     @Override
@@ -168,11 +175,7 @@ public class NMSSlimeChunk implements SlimeChunk {
     public List<CompoundTag> getEntities() {
         List<net.minecraft.nbt.CompoundTag> entities = new ArrayList<>();
 
-        if(this.chunk == null || this.chunk.getChunkHolder() == null) {
-            return new ArrayList<>();
-        }
-
-        ChunkEntitySlices slices = this.chunk.getChunkHolder().getEntityChunk();
+        ChunkEntitySlices slices = getEntitySlices();
         if (slices == null) {
             return new ArrayList<>();
         }
@@ -194,6 +197,18 @@ public class NMSSlimeChunk implements SlimeChunk {
         });
     }
 
+    private ChunkEntitySlices getEntitySlices() {
+        if (this.entitySlices != null) {
+            return entitySlices;
+        }
+
+        if (this.chunk == null || this.chunk.getChunkHolder() == null) {
+            return null;
+        }
+
+        return this.chunk.getChunkHolder().getEntityChunk();
+    }
+
     @Override
     public CompoundTag getExtraData() {
         return extra;
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeChunkLevel.java b/src/main/java/com/infernalsuite/asp/level/SlimeChunkLevel.java
index a92d17b5c6a7c8427ecbdf56a9c2a0c1b66978e4..6313b235eb8ccbd63b57159964ba33d36db51933 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeChunkLevel.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeChunkLevel.java
@@ -19,12 +19,6 @@ public class SlimeChunkLevel extends LevelChunk {
         this.inMemoryWorld = world.slimeInstance;
     }
 
-    @Override
-    public void unloadCallback() {
-        super.unloadCallback();
-        this.inMemoryWorld.unload(this);
-    }
-
     @Override
     public void loadCallback() {
         super.loadCallback();
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
index a150c5ebb1fa48542550d905a675a86444f8f22d..5daabf7d2c31972082fc618142643592535fb13f 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
@@ -104,11 +104,11 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
 
     // Authored by: Kenox <muranelp@gmail.com>
     // Don't use the NMS live chunk in the chunk map
-    public void unload(LevelChunk providedChunk) {
+    public void unload(LevelChunk providedChunk, ca.spottedleaf.moonrise.patches.chunk_system.level.entity.ChunkEntitySlices entitySlices) {
         final int x = providedChunk.locX;
         final int z = providedChunk.locZ;
 
-        SlimeChunk chunk = new NMSSlimeChunk(providedChunk, getChunk(x, z));
+        SlimeChunk chunk = new NMSSlimeChunk(providedChunk, getChunk(x, z), entitySlices);
 
         if (FastChunkPruner.canBePruned(this.liveWorld, providedChunk)) {
             this.chunkStorage.remove(Util.chunkPosition(x, z));
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
index d672504eee439d96a9054b3308ba3a5d18cca867..1b0d36854c190efefc7421f445a70b92f82a4fe5 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
@@ -202,9 +202,7 @@ public class SlimeLevelInstance extends ServerLevel {
         propertyMap.setValue(SlimeProperties.SPAWN_YAW, angle);
     }
 
-    @Override
-    public void unload(LevelChunk chunk) {
-        this.slimeInstance.unload(chunk);
-        super.unload(chunk);
+    public void onChunkUnloaded(LevelChunk chunk, ca.spottedleaf.moonrise.patches.chunk_system.level.entity.ChunkEntitySlices entityChunk) {
+        this.slimeInstance.unload(chunk, entityChunk);
     }
 }
\ No newline at end of file
